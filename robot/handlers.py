import os
import sys
from aiogram import Dispatcher, types
import keyboards
import database
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.callback_data import CallbackData
import aiohttp
import random
import logging
import json


logging.basicConfig(level=logging.INFO)

class ReplenishBalanceStates(StatesGroup):
    choose_method = State()  
    enter_amount = State()  
    payment_method = None  

async def update_crypto_rates():
    global btc_price, ltc_price
    url = 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,litecoin&vs_currencies=rub'
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            btc_price = data['bitcoin']['rub']
            ltc_price = data['litecoin']['rub']

async def periodic_crypto_update():
    while True:
        await update_crypto_rates()
        await asyncio.sleep(900)  

btc_price = 0
ltc_price = 0

async def register_handlers(dp: Dispatcher, bot_token):
    @dp.message_handler(commands=['start'])
    async def send_welcome(message: types.Message):
        user_id = message.from_user.id
        if not database.check_user_exists(user_id, bot_token):
            database.add_user(user_id, bot_token)
            await message.answer("–ü—Ä–∏–≤–µ—Ç! –°–∞–ª–∞–º! –®–∞–ª–æ–º! –ù–∞ —Å–≤—è–∑–∏ DOC. –£ –Ω–∞—Å —Ç—ã –ø–æ–ª—É—á–∏—à—å –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ —Ç–∞–∫ –∏—Å–∫–∞–ª!ü¶∏ –î–∞–≤–∞–π –±—ã—Å—Ç—Ä–µ–µ –∑–∞–∫–∞–∑—ã–≤–∞–π!", reply_markup=keyboards.main_keyboard())
            
            await show_cities(message)
        else:
            await message.answer("–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π! üëã –°–æ—Å–∫—É—á–∏–ª—Å—è –ø–æ –Ω–∞–º? –ú—ã —Ç–æ–∂–µ üòÖ –ë–µ–≥–æ–º –∑–∞–∫–∞–∑—ã–≤–∞–π. –¢–æ–≤–∞—Ä —É–∂–µ —Ç–µ–±—è –∑–∞–∂–¥–∞–ª—Å—è üòú", reply_markup=keyboards.main_keyboard())
    @dp.message_handler(lambda message: message.text == "–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    async def show_cities(message: types.Message):
        cities = database.get_cities()
        markup = InlineKeyboardMarkup(row_width=1)
    
        for city in cities:
            city_button = InlineKeyboardButton(city[1], callback_data=f"city_{city[0]}")
            markup.insert(city_button)
    
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", reply_markup=markup)
    @dp.message_handler(lambda message: message.text == "–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥/—Ä–∞–π–æ–Ω")
    async def show_cities(message: types.Message):
        cities = database.get_cities()
        markup = InlineKeyboardMarkup(row_width=1)
    
        for city in cities:
            city_button = InlineKeyboardButton(city[1], callback_data=f"city_{city[0]}")
            markup.insert(city_button)
    
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", reply_markup=markup)
    @dp.callback_query_handler(lambda c: c.data.startswith('city_'))
    async def show_categories(callback_query: types.CallbackQuery):
        city_id = int(callback_query.data.split('_')[1])
        city_name = database.get_city_name(city_id)
        categories = database.get_categories_by_city(city_id)
        markup = InlineKeyboardMarkup(row_width=1)
    
        for category in categories:
            category_button = InlineKeyboardButton(category[1], callback_data=f"category_{category[0]}")
            markup.insert(category_button)
    
        await callback_query.message.edit_text(f"–í—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —Ö–æ—á–µ—Ç—Å—è!üëá", reply_markup=markup)
    @dp.callback_query_handler(lambda c: c.data.startswith('category_'))
    async def show_products(callback_query: types.CallbackQuery):
        category_id = int(callback_query.data.split('_')[1])
        products = database.get_products_by_category(category_id)
    
        
        await callback_query.message.delete()
    
        if not products:
            
            await callback_query.message.answer("–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
    
        for product in products:
            product_details_list = database.get_product_details(product[0])
            if not product_details_list:
                continue  
    
            
            product_text = f"<b>{product[1]}</b>\n"
            description = ""
            for details in product_details_list:
                if not description:
                    description = details["description"] if details["description"] else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                price = int(details["price"]) if details["price"] else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                weight = details["weight"]
                product_text += f"‚úÖ {weight}–≥—Ä ‚Äî {price}‚ÇΩ\n"
    
            product_text += f"\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}"
    
            markup = InlineKeyboardMarkup(row_width=1)
            markup.add(InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data=f"select_{product[0]}"))
    
            
            await callback_query.message.answer(text=product_text, parse_mode='HTML', reply_markup=markup)
    @dp.callback_query_handler(lambda c: c.data.startswith('select_'))
    async def select_product(callback_query: types.CallbackQuery):
        product_id = int(callback_query.data.split('_')[1])
        product_details_list = database.get_product_details(product_id)
        
        if not product_details_list:
            await callback_query.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return
    
        
        markup = InlineKeyboardMarkup()
        for details in product_details_list:
            weight = details["weight"]
            price = details["price"]
            button_text = f"{weight}–≥—Ä ‚Äî {price}‚ÇΩ"
            markup.add(InlineKeyboardButton(button_text, callback_data=f"buy_{product_id}_{weight}"))
    
        await callback_query.message.edit_reply_markup(reply_markup=markup)
        await callback_query.answer()
    @dp.callback_query_handler(lambda c: c.data.startswith('buy_'))
    async def select_district(callback_query: types.CallbackQuery):
        _, product_id, weight = callback_query.data.split('_')
        product_details_list = database.get_product_details_by_weight(product_id, weight)
    
        if not product_details_list:
            await callback_query.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return
        
        
        details = product_details_list[0]
        product_price = details["price"]
    
        
        districts = set(details["districts"].split(',')) if details["districts"] else set()
    
        message_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {weight}–≥—Ä\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {product_price}‚ÇΩ\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ä–∞–π–æ–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:"
    
        if districts:
            
            markup = InlineKeyboardMarkup()
            for district in districts:
                markup.add(InlineKeyboardButton(district, callback_data=f"district_{product_id}_{weight}_{district}"))
            await callback_query.message.edit_text(message_text, reply_markup=markup)
        else:
            
            await choose_product_payment_method(callback_query)
    @dp.callback_query_handler(lambda c: c.data.startswith('district_'))
    async def choose_product_payment_method(callback_query: types.CallbackQuery, state: FSMContext):
        _, product_id, weight, district = callback_query.data.split('_')
        product_price = database.get_product_price(product_id, float(weight))
    
        
        await ReplenishBalanceStates.choose_method.set()
    
        
        await state.update_data(product_id=product_id, weight=weight, product_price=product_price)
    
        
        inline_kb = InlineKeyboardMarkup()
        inline_kb.row(InlineKeyboardButton("–ö–∞—Ä—Ç–∞", callback_data="pay_card"))
        inline_kb.row(InlineKeyboardButton("Bitcoin", callback_data="pay_btc"),
                      InlineKeyboardButton("Litecoin", callback_data="pay_ltc"))
        inline_kb.row(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    
        await callback_query.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:",
            reply_markup=inline_kb
        )
    @dp.callback_query_handler(lambda c: c.data.startswith('pay_'), state=ReplenishBalanceStates.choose_method)
    async def process_payment_method_selection(callback_query: types.CallbackQuery, state: FSMContext):
        payment_method = callback_query.data.split('_')[1]
    
        user_data = await state.get_data()
        product_price = user_data['product_price']
    
        await state.update_data(payment_method=payment_method)
    
        final_amount = calculate_final_amount(product_price, payment_method)
        payment_details = database.get_payment_details(payment_method)
        currency = "RUB" if payment_method == "card" else payment_method.upper()
    
        
        order_number = ''.join([str(random.randint(0, 9)) for _ in range(8)])
    
        await callback_query.message.edit_text(
            f"<b>–ó–∞–∫–∞–∑ ‚Ññ{order_number} –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã.</b>\n\n–û–ø–ª–∞—Ç–∏—Ç–µ {final_amount} {currency}.\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: {payment_details}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup().row(
                InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid")
            ).row(
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")
            )
        )
        await state.finish()
    @dp.message_handler(lambda message: message.text == "–û—Ç–∑—ã–≤—ã")
    async def send_first_review(message: types.Message):
        
        review_text = "–í—Å–µ –ø—Ä–æ—Å—Ç–æ —Å—É–ø–µ—Ä, –ª—É—á—à–µ –Ω–µ –ø—Ä–∏–¥—É–º–∞–µ—à—å. –º–µ—Å—Ç–æ –∏–¥–µ–∞–ª—å–Ω–æ–µ –∏ —Ç–∏—Ö–æ–µ —Å—Ç–∞–≤ –æ–≥–æ–Ω—å."
        review_date = "10.06.2023 18:50"
        keyboard = keyboards.get_review_navigation_keyboard(0)
        await message.answer(f"<b>–û—Ç–∑—ã–≤ –æ—Ç {review_date}</b>\n\n–¢–æ–≤–∞—Ä: ALFA (–ü–†–û–ë–ê)\n\n{review_text}", reply_markup=keyboard, parse_mode='HTML')
    @dp.callback_query_handler(lambda c: c.data.startswith('review_'))
    async def navigate_reviews(callback_query: types.CallbackQuery):
        
        reviews_data = [
            {"date": "10.06.2023 18:50", "text": "–í—Å–µ –ø—Ä–æ—Å—Ç–æ —Å—É–ø–µ—Ä, –ª—É—á—à–µ –Ω–µ –ø—Ä–∏–¥—É–º–∞–µ—à—å. –º–µ—Å—Ç–æ –∏–¥–µ–∞–ª—å–Ω–æ–µ –∏ —Ç–∏—Ö–æ–µ —Å—Ç–∞–≤ –æ–≥–æ–Ω—å."},
            {"date": "02.06.2023 21:59", "text": "–í—Å—ë –±—ã–ª–æ –æ—á–µ–Ω—å —á—É–¥–µ—Å–Ω–æ, –ø–æ–¥–Ω—è–ª—Å—è –ø–µ—Ä–≤–æ–≥–æ –∫–∞—Å–∞–Ω–∏—è ))"},
            {"date": "01.06.2023 05:15", "text": "–°—Ç–∞—Ñ –Ω–∞ –ø—è—Ç–µ—Ä–æ—á–∫—É –∏–∑ –ø—è—Ç–∏, —Å–ø—Ä—è—Ç–∞–Ω–Ω–æ –±—ã–ª–æ —á—ë—Ç–∫–æ —Å–Ω—è–ª –≤ –∫–∞—Å–∞–Ω–∏–µ, –≤—Å—ë–º —Å–æ–≤–µ—Ç—É—é —ç—Ç–æ—Ç –º–∞–≥–∞–∑–∏–Ω."}
        ]
        
        current_index = int(callback_query.data.split('_')[1])
        review = reviews_data[current_index]
        keyboard = keyboards.get_review_navigation_keyboard(current_index)
        
        await callback_query.message.edit_text(f"<b>–û—Ç–∑—ã–≤ –æ—Ç {review['date']}</b>\n\n–¢–æ–≤–∞—Ä: ALFA (–ü–†–û–ë–ê)\n\n{review['text']}", reply_markup=keyboard, parse_mode='HTML')
    @dp.callback_query_handler(lambda c: c.data == 'my_products_list')
    async def process_callback_my_products_list(callback_query: types.CallbackQuery):
        await callback_query.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", show_alert=True)
    @dp.message_handler(lambda message: message.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    async def show_profile(message: types.Message):
        user_id = message.from_user.id

        response_message = (f"–õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç\n\n"
                            f"–í–∞—à –±–∞–ª–∞–Ω—Å: 0‚ÇΩ\n"
                            f"–ü–æ–ø–æ–ª–Ω—è–π—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å, —á—Ç–æ–± —É –≤–∞—Å –±—ã–ª–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–≥–¥–∞-—É–≥–æ–¥–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ.\n\n")
        await message.answer(response_message, parse_mode='HTML', reply_markup=keyboards.replenish_balance_keyboard())
    @dp.message_handler(lambda message: message.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    async def handle_help_request(message: types.Message):
        help_text = database.get_help_text()  
        await message.answer(help_text, parse_mode='HTML')
    @dp.callback_query_handler(lambda c: c.data == 'replenish_balance')
    async def replenish_balance(callback_query: types.CallbackQuery):
        inline_kb = InlineKeyboardMarkup()
        
        inline_kb.row(InlineKeyboardButton("–ö–∞—Ä—Ç–∞", callback_data="method_card"))
    
        
        inline_kb.row(
            InlineKeyboardButton("Bitcoin", callback_data="method_btc"),
            InlineKeyboardButton("Litecoin", callback_data="method_ltc")
        )
    
        inline_kb.row(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
            reply_markup=inline_kb
        )
        await ReplenishBalanceStates.choose_method.set()
    @dp.callback_query_handler(lambda c: c.data == 'method_card', state=ReplenishBalanceStates.choose_method)
    async def process_card_payment_method(callback_query: types.CallbackQuery, state: FSMContext):
        await state.update_data(payment_method='card')
        await show_enter_amount_message(callback_query.message, state)
    
    @dp.callback_query_handler(lambda c: c.data == 'method_btc', state=ReplenishBalanceStates.choose_method)
    async def process_btc_payment_method(callback_query: types.CallbackQuery, state: FSMContext):
        await state.update_data(payment_method='btc')
        await show_enter_amount_message(callback_query.message, state)
    
    @dp.callback_query_handler(lambda c: c.data == 'method_ltc', state=ReplenishBalanceStates.choose_method)
    async def process_ltc_payment_method(callback_query: types.CallbackQuery, state: FSMContext):
        await state.update_data(payment_method='ltc')
        await show_enter_amount_message(callback_query.message, state)
    
    async def show_enter_amount_message(message, state: FSMContext):
        await message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö:",
            reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        )
        await ReplenishBalanceStates.enter_amount.set()
    @dp.message_handler(state=ReplenishBalanceStates.enter_amount)
    async def process_replenish_amount(message: types.Message, state: FSMContext):
        amount = message.text
        if not amount.isdigit() or int(amount) < 1000:
            await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–µ –º–µ–Ω–µ–µ 1000 —Ä—É–±–ª–µ–π).")
            return
        
        user_data = await state.get_data()
        payment_method = user_data['payment_method']
    
        
        final_amount = calculate_final_amount(amount, payment_method)
    
        payment_details = database.get_payment_details(payment_method)
        currency = "RUB" if payment_method == "card" else payment_method.upper()
    
        await message.answer(
            f"–°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n\n–°—É–º–º–∞: <code>{final_amount}</code> {currency}\n–†–µ–∫–≤–µ–∑–∏—Ç—ã: <code>{payment_details}</code>",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup().row(
                InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")
            ).row(
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")
            )
        )
        await state.finish()
    @dp.callback_query_handler(lambda c: c.data == 'cancel', state='*')
    async def process_cancel(callback_query: types.CallbackQuery, state: FSMContext):
        await state.finish()  
        await callback_query.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    @dp.callback_query_handler(lambda c: c.data == 'paid', state='*')
    async def process_payment_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.answer("–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", show_alert=True)

     
def calculate_final_amount(amount, payment_method):
    amount = float(amount)
    if payment_method == 'card':
        return amount  
    elif payment_method == 'btc':
        return round(amount / btc_price, 8)  
    elif payment_method == 'ltc':
        return round(amount / ltc_price, 5)  
